![우박수](./public/image/우박수.png)

2020 01 12

첫 리뷰!
폴더에 퍼블릭/이미지 폴더를 만들어서 이미지를 넣고 첨부해보았다.

오늘의 리뷰는 우박수 문제. 처음에는 문제를 이해 못해서 넘어갔던 문제다.

문제를 다시 파악해보니, 1로 귀결되는 우박수의 수열을 찾으면 되는 것 이였다.

```
1, 어떤 자연수 n이 입력되면,

2. n이 홀수이면 3n+1을 하고,

3. n이 짝수이면 n/2를 한다.
```

시간복잡도를 줄이기 위해, 메모이제이션을 활용하면 이미 찾아진 우박수의 길이를 계속해서 저장해놓으면 빠르게 찾을 수 있다.
홀수인지 짝수인지 구분을 해주고, (<- "다른 빠른 방법이 있을까?")
1에 도달할 때 까지 재귀함수를 돌리면서 메모이제이션 배열의 크기를 늘려나간다.
만약 이미 값이 찾아진 숫자면 해당 숫자의 메모이제이션을 받아주고 끝.


필요한것: 메모이제이션 배열

처음 풀이는 배열크기를 잘못 생각해서 인풋 두개 사이의 구간의 메모이제이션만 하면 된다고 생각했지만, 잘못된 생각이였다.

```java
import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {
    
    
    static int [] memo;
    static int max;
    static int a;
    static int b;
    
    
    public static void main(String[] args)throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        String s = br.readLine();
        String [] s2 = s.split(" ");
        a = Integer.parseInt(s2[0]);
        b = Integer.parseInt(s2[1]);
        max = -1;
        memo = new int [b-a+1];
        int len = 0;
        int ubaksu = 0;
        for(int i=0; i<b-a+1; i++){
            len = ubak(i+a);
            if(len> max){
                max = len;
                ubaksu = i+a;
            }
        }
        sb.append(len+" "+ubaksu);
        System.out.println(sb.toString());
        
    }
    static int ubak(int n){
        
        if((n)==1){
            return 1;
        }
        else{
            if(memo[n-a]!=0){
                return memo[n-a];
            }
            if((n)%2!=0){
                memo[n-a] = ubak(3*(n)+1);
                return memo[n-a];
            }else{
                memo[n-a] = ubak(((n)/2));
                return memo[n-a];
            }
        }
        
        
    }
    
    
}


```
이렇게 하면 우박수가 배열크기를 벗어날 때 오류가 난다.
따라서 배열크기는 매우 크게 만들어주어야 한다.

근데 10000000 크기의 메모이제이션을 줘도 초과가 나기 때문에 10000000이상의 인풋이 들어올때는 예외처리로 메모이제이션을 안하고
재귀를 돌리는 풀이가 있었다.

또 int범위를 벗어나는 경우가 생기기 때문에 long처리를 해줘야 했다.

```
import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {
    
    
    static int [] memo = new int [10000001];
    public static void main(String[] args)throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        String s = br.readLine();
        String [] s2 = s.split(" ");
        long a = (long)Integer.parseInt(s2[0]);
        long b = (long)Integer.parseInt(s2[1]);
        long max = -1;
       
        long len = 0 ;
        long ubaksu =0 ;
        for(long i=b; i>=a; i--){
            if(memo[(int)i]== 0){
                len = ubak(i);
            }else{
                continue;
            }
            if(len> max){
                max = len;
                ubaksu = i;
            }
        }
        sb.append(ubaksu+" "+memo[(int)ubaksu]);
        System.out.print(sb.toString());
        
    }
    static long ubak(long n){
        
        int k = (int)n;
        if(n> 10000000){
            if((n)%2!=0){
                return ubak(3*n+1)+1;
            }else{
                return ubak(n/2)+1;
            }
        }
        if((n)==1){
            return 1;
        }
        else{
            if(memo[k]!=0){
                return memo[k];
            }
            if((n)%2!=0){
                memo[k] = (int)ubak(3*n+1)+1;
                return memo[k];
            }else{
                memo[k] = (int)ubak(n/2)+1;
                return memo[k];
            }
        }
        
        
    }
    
    
}
```

그런데 자꾸 테스트 케이스 3에서 잘못된 결과가 나와서 타입캐스팅 때문에 발생하는 것인지 잘 모르겠다.

```
정답
9808636 513
-----------------
출력 결과
9844961 513
=================
```
